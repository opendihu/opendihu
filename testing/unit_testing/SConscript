# SConscript file for testing
#

Import('env')     # import Environment object from calling SConstruct

# if the option no_tests was given, quit the script
if not env['no_tests']:

  # choose the variant directory depending on the build target
  if env["BUILD_TYPE"] == "debug":
    variant_directory = "build_debug"
  elif env["BUILD_TYPE"] == "releasewithdebuginfo":
    variant_directory = "build_release_with_debug_info"
  else:
    variant_directory = "build_release"

  # ---- serial unit tests ----
  if True:
    # define the source files
    src_files = Glob('src/1_rank/*.cpp')

    # all src files:
    src_files = ['src/1_rank/diffusion.cpp',
                'src/1_rank/cellml.cpp',
                'src/1_rank/faces.cpp',
                'src/1_rank/field_variable.cpp',
                'src/1_rank/laplace_1d.cpp',
                'src/1_rank/laplace_2d.cpp',
                'src/1_rank/laplace_3d.cpp',
                'src/1_rank/main.cpp',
                'src/1_rank/mesh.cpp',
                'src/1_rank/neumann_boundary_conditions_1d.cpp',
                'src/1_rank/neumann_boundary_conditions_2d.cpp',
                'src/1_rank/neumann_boundary_conditions_3d.cpp',
                'src/1_rank/numerical_integration.cpp',
                'src/1_rank/operator_splitting.cpp',
                'src/1_rank/output.cpp',
                'src/1_rank/poisson.cpp',
                'src/1_rank/solid_mechanics.cpp',
                'src/1_rank/unstructured_deformable.cpp',
                'src/1_rank/composite_mesh.cpp',
                'src/utility.cpp']

    #src_files = ['src/1_rank/solid_mechanics.cpp', 'src/1_rank/main.cpp', 'src/utility.cpp']
    #print("")
    #print("WARNING: only compiling tests ",src_files)

    program = env.Program('1_rank_tests', source=src_files)

    # add command that runs the tests after build
    # "--allow-run-as-root" is required for the run in a docker container
    test = env.Command(target = 'test1', source = './1_rank_tests', action = 
      'cd testing/unit_testing/'+variant_directory+' && mpirun -n 1 --allow-run-as-root -quiet ./1_rank_tests || [ -f "SUCCESS1" ]')

    AlwaysBuild(test)


  # ---- parallel unit tests: 2 ranks ----
  if True:
    src_files = ['src/2_ranks/laplace_1d.cpp',
                 'src/2_ranks/laplace_2d.cpp',
                 'src/2_ranks/laplace_3d.cpp',
                 'src/2_ranks/diffusion.cpp',
                 'src/2_ranks/poisson.cpp',
                 'src/2_ranks/neumann_boundary_conditions.cpp',
                 'src/2_ranks/solid_mechanics.cpp',
                 'src/2_ranks/main.cpp',
                 'src/utility.cpp',
                 'src/2_ranks/partitioned_petsc_vec.cpp',
                 'src/2_ranks/composite_mesh.cpp']
    #src_files = ['src/2_ranks/solid_mechanics.cpp', 'src/2_ranks/main.cpp', 'src/utility.cpp']
    #print("")
    #print("WARNING: only compiling tests ",src_files)

    program = env.Program('2_ranks_tests', source=src_files)

    # Add command that runs the tests after build, there is a construction that some MPI ranks can fail after they are successfully done because they are aborted because MPI_Finalize cannot be called in unit tests because after that MPI_Init cannot be called again and this would be needed to run multiple unit tests in one executable.
    test = env.Command(target = 'test2', source = './2_ranks_tests', action = 
      'cd testing/unit_testing/'+variant_directory+' && mpirun -n 2 --allow-run-as-root -quiet ./2_ranks_tests || [ -f "SUCCESS2" ]')

    AlwaysBuild(test)

  # ---- parallel unit tests: 6 ranks ----
  if True:
    src_files = ['src/6_ranks/numberings.cpp', 
                 'src/6_ranks/diffusion.cpp', 
                 'src/6_ranks/partitioned_petsc_vec.cpp', 
                 'src/6_ranks/main.cpp', 
                 'src/utility.cpp']
    #src_files = ['src/6_ranks/partitioned_petsc_vec.cpp', 'src/6_ranks/main.cpp', 'src/utility.cpp']

    program = env.Program('6_ranks_tests', source=src_files)

    # add command that runs the tests after build
    test = env.Command(target = 'test6', source = './6_ranks_tests', action = 
      'cd testing/unit_testing/'+variant_directory+' && mpirun -n 6 --oversubscribe -allow-run-as-root -quiet ./6_ranks_tests || [ -f "SUCCESS6" ]') #Use oversubscribe because of resource limitations in GitHub Actions

    AlwaysBuild(test)

  # ---- test compilation of examples ----
  if True and not env["no_examples"]:
    # only in release mode
    if env["BUILD_TYPE"] == "release":
      test = env.Command(target = 'test_examples', source = None, action = 'cd scripts && ./check_if_examples_compile.sh')
      Depends(test, '../../../core/build_release/libopendihu.a')

   # summary command, exit 1 if one the three tests failed
  test = env.Command(target = 'summary', source = None, action = 'cd testing/unit_testing/'+variant_directory+' && \
    [ -f "SUCCESS1" ] && (echo unit tests on 1 rank SUCCEDED) || (echo unit tests on 1 rank FAILED) && \
    [ -f "SUCCESS2" ] && (echo unit tests on 2 ranks SUCCEDED) || (echo unit tests on 2 ranks FAILED)  && \
    [ -f "SUCCESS6" ] && (echo unit tests on 6 ranks SUCCEDED) || (echo unit tests on 6 ranks FAILED) && \
    (([ ! -f "SUCCESS1" ] || [ ! -f "SUCCESS2" ] || [ ! -f "SUCCESS6" ]) && exit 1) || exit 0')

  if env["no_examples"]:
    Depends(test, ['test1', 'test2', 'test6'])
  else:
    Depends(test, ['test_examples', 'test1', 'test2', 'test6'])

if env['travis_ci']:
  test = env.Command(target = 'test_examples', source = None, action = 'cd scripts && ./check_if_examples_compile.sh')
  AlwaysBuild(test)

  
