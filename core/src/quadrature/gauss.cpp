#include "quadrature/gauss.h"

#include <array>
#include <cmath>

namespace Quadrature {

// 1 Gauss point
template <> std::array<double, 1> Gauss<1>::samplingPoints() {
  return std::array<double, 1>{0.5};
}

// 2 Gauss points
template <> std::array<double, 2> Gauss<2>::samplingPoints() {
  return std::array<double, 2>{
      (-1. / sqrt(3.) + 1) / 2.,
      (+1. / sqrt(3.) + 1) / 2.,
  };
}

// 3 Gauss points
template <> std::array<double, 3> Gauss<3>::samplingPoints() {
  return std::array<double, 3>{
      (-sqrt(3. / 5) + 1) / 2.,
      1. / 2,
      (+sqrt(3. / 5) + 1) / 2.,
  };
}

// 4 Gauss points
template <> std::array<double, 4> Gauss<4>::samplingPoints() {
  return std::array<double, 4>{(-sqrt(3. / 7 + 2. / 7 * sqrt(6. / 5)) + 1) / 2.,
                               (-sqrt(3. / 7 - 2. / 7 * sqrt(6. / 5)) + 1) / 2.,
                               (+sqrt(3. / 7 - 2. / 7 * sqrt(6. / 5)) + 1) / 2.,
                               (+sqrt(3. / 7 + 2. / 7 * sqrt(6. / 5)) + 1) /
                                   2.};
}

// 5 Gauss points
template <> std::array<double, 5> Gauss<5>::samplingPoints() {
  return std::array<double, 5>{
      (-1. / 3 * sqrt(5 + 2. * sqrt(10. / 7)) + 1) / 2.,
      (-1. / 3 * sqrt(5 - 2. * sqrt(10. / 7)) + 1) / 2., 1. / 2.,
      (+1. / 3 * sqrt(5 - 2. * sqrt(10. / 7)) + 1) / 2.,
      (+1. / 3 * sqrt(5 + 2. * sqrt(10. / 7)) + 1) / 2.};
}

// 7 Gauss points
template <> std::array<double, 6> Gauss<6>::samplingPoints() {
  return std::array<double, 6>{
      (0.6612093864662645 + 1) / 2.,  (-0.6612093864662645 + 1) / 2.,
      (-0.2386191860831969 + 1) / 2., (0.2386191860831969 + 1) / 2.,
      (-0.9324695142031521 + 1) / 2., (0.9324695142031521 + 1) / 2.,
  };
}

// 7 Gauss points
template <> std::array<double, 7> Gauss<7>::samplingPoints() {
  return std::array<double, 7>{
      (0.0000000000000000 + 1) / 2.,  (0.4058451513773972 + 1) / 2.,
      (-0.4058451513773972 + 1) / 2., (-0.7415311855993945 + 1) / 2.,
      (0.7415311855993945 + 1) / 2.,  (-0.9491079123427585 + 1) / 2.,
      (0.9491079123427585 + 1) / 2.};
}

// 8 Gauss points
template <> std::array<double, 8> Gauss<8>::samplingPoints() {
  return std::array<double, 8>{
      (-0.1834346424956498 + 1.) / 2., (0.1834346424956498 + 1.) / 2.,
      (-0.5255324099163290 + 1.) / 2., (0.5255324099163290 + 1.) / 2.,
      (-0.7966664774136267 + 1.) / 2., (0.7966664774136267 + 1.) / 2.,
      (-0.9602898564975363 + 1.) / 2., (0.9602898564975363 + 1.) / 2.,
  };
}

// 10 Gauss points
template <> std::array<double, 10> Gauss<10>::samplingPoints() {
  return std::array<double, 10>{
      (-0.1488743389816312 + 1.) / 2., (0.1488743389816312 + 1.) / 2.,
      (-0.4333953941292472 + 1.) / 2., (0.4333953941292472 + 1.) / 2.,
      (-0.6794095682990244 + 1.) / 2., (0.6794095682990244 + 1.) / 2.,
      (-0.8650633666889845 + 1.) / 2., (0.8650633666889845 + 1.) / 2.,
      (-0.9739065285171717 + 1.) / 2., (0.9739065285171717 + 1.) / 2.,
  };
}

// 12 Gauss points
template <> std::array<double, 12> Gauss<12>::samplingPoints() {
  return std::array<double, 12>{
      (-0.1252334085114689 + 1.) / 2., (0.1252334085114689 + 1.) / 2.,
      (-0.3678314989981802 + 1.) / 2., (0.3678314989981802 + 1.) / 2.,
      (-0.5873179542866175 + 1.) / 2., (0.5873179542866175 + 1.) / 2.,
      (-0.7699026741943047 + 1.) / 2., (0.7699026741943047 + 1.) / 2.,
      (-0.9041172563704749 + 1.) / 2., (0.9041172563704749 + 1.) / 2.,
      (-0.9815606342467192 + 1.) / 2., (0.9815606342467192 + 1.) / 2.,
  };
}

// 16 Gauss points
template <> std::array<double, 16> Gauss<16>::samplingPoints() {
  return std::array<double, 16>{
      (-0.0950125098376374 + 1.) / 2., (0.0950125098376374 + 1.) / 2.,
      (-0.2816035507792589 + 1.) / 2., (0.2816035507792589 + 1.) / 2.,
      (-0.4580167776572274 + 1.) / 2., (0.4580167776572274 + 1.) / 2.,
      (-0.6178762444026438 + 1.) / 2., (0.6178762444026438 + 1.) / 2.,
      (-0.7554044083550030 + 1.) / 2., (0.7554044083550030 + 1.) / 2.,
      (-0.8656312023878318 + 1.) / 2., (0.8656312023878318 + 1.) / 2.,
      (-0.9445750230732326 + 1.) / 2., (0.9445750230732326 + 1.) / 2.,
      (-0.9894009349916499 + 1.) / 2., (0.9894009349916499 + 1.) / 2.,
  };
}

// 20 Gauss points
template <> std::array<double, 20> Gauss<20>::samplingPoints() {
  return std::array<double, 20>{
      (-0.0765265211334973 + 1.) / 2., (0.0765265211334973 + 1.) / 2.,
      (-0.2277858511416451 + 1.) / 2., (0.2277858511416451 + 1.) / 2.,
      (-0.3737060887154195 + 1.) / 2., (0.3737060887154195 + 1.) / 2.,
      (-0.5108670019508271 + 1.) / 2., (0.5108670019508271 + 1.) / 2.,
      (-0.6360536807265150 + 1.) / 2., (0.6360536807265150 + 1.) / 2.,
      (-0.7463319064601508 + 1.) / 2., (0.7463319064601508 + 1.) / 2.,
      (-0.8391169718222188 + 1.) / 2., (0.8391169718222188 + 1.) / 2.,
      (-0.9122344282513259 + 1.) / 2., (0.9122344282513259 + 1.) / 2.,
      (-0.9639719272779138 + 1.) / 2., (0.9639719272779138 + 1.) / 2.,
      (-0.9931285991850949 + 1.) / 2., (0.9931285991850949 + 1.) / 2.,
  };
}

// 24 Gauss points
template <> std::array<double, 24> Gauss<24>::samplingPoints() {
  return std::array<double, 24>{
      (0.1279381953467522 + 1.) / 2.,  (0.0640568928626056 + 1.) / 2.,
      (-0.1911188674736163 + 1.) / 2., (0.1911188674736163 + 1.) / 2.,
      (-0.3150426796961634 + 1.) / 2., (0.3150426796961634 + 1.) / 2.,
      (-0.4337935076260451 + 1.) / 2., (0.4337935076260451 + 1.) / 2.,
      (-0.5454214713888396 + 1.) / 2., (0.5454214713888396 + 1.) / 2.,
      (-0.6480936519369755 + 1.) / 2., (0.6480936519369755 + 1.) / 2.,
      (-0.7401241915785544 + 1.) / 2., (0.7401241915785544 + 1.) / 2.,
      (-0.8200019859739029 + 1.) / 2., (0.8200019859739029 + 1.) / 2.,
      (-0.8864155270044011 + 1.) / 2., (0.8864155270044011 + 1.) / 2.,
      (-0.9382745520027328 + 1.) / 2., (0.9382745520027328 + 1.) / 2.,
      (-0.9747285559713095 + 1.) / 2., (0.9747285559713095 + 1.) / 2.,
      (-0.9951872199970213 + 1.) / 2., (0.9951872199970213 + 1.) / 2.,

  };
}

// 64 Gauss points
template <> std::array<double, 64> Gauss<64>::samplingPoints() {
  // source: https://pomax.github.io/bezierinfo/legendre-gauss.html
  return std::array<double, 64>{
      (-0.0243502926634244 + 1) / 2., (0.0243502926634244 + 1) / 2.,
      (-0.0729931217877990 + 1) / 2., (0.0729931217877990 + 1) / 2.,
      (-0.1214628192961206 + 1) / 2., (0.1214628192961206 + 1) / 2.,
      (-0.1696444204239928 + 1) / 2., (0.1696444204239928 + 1) / 2.,
      (-0.2174236437400071 + 1) / 2., (0.2174236437400071 + 1) / 2.,
      (-0.2646871622087674 + 1) / 2., (0.2646871622087674 + 1) / 2.,
      (-0.3113228719902110 + 1) / 2., (0.3113228719902110 + 1) / 2.,
      (-0.3572201583376681 + 1) / 2., (0.3572201583376681 + 1) / 2.,
      (-0.4022701579639916 + 1) / 2., (0.4022701579639916 + 1) / 2.,
      (-0.4463660172534641 + 1) / 2., (0.4463660172534641 + 1) / 2.,
      (-0.4894031457070530 + 1) / 2., (0.4894031457070530 + 1) / 2.,
      (-0.5312794640198946 + 1) / 2., (0.5312794640198946 + 1) / 2.,
      (-0.5718956462026340 + 1) / 2., (0.5718956462026340 + 1) / 2.,
      (-0.6111553551723933 + 1) / 2., (0.6111553551723933 + 1) / 2.,
      (-0.6489654712546573 + 1) / 2., (0.6489654712546573 + 1) / 2.,
      (-0.6852363130542333 + 1) / 2., (0.6852363130542333 + 1) / 2.,
      (-0.7198818501716109 + 1) / 2., (0.7198818501716109 + 1) / 2.,
      (-0.7528199072605319 + 1) / 2., (0.7528199072605319 + 1) / 2.,
      (-0.7839723589433414 + 1) / 2., (0.7839723589433414 + 1) / 2.,
      (-0.8132653151227975 + 1) / 2., (0.8132653151227975 + 1) / 2.,
      (-0.8406292962525803 + 1) / 2., (0.8406292962525803 + 1) / 2.,
      (-0.8659993981540928 + 1) / 2., (0.8659993981540928 + 1) / 2.,
      (-0.8893154459951141 + 1) / 2., (0.8893154459951141 + 1) / 2.,
      (-0.9105221370785028 + 1) / 2., (0.9105221370785028 + 1) / 2.,
      (-0.9295691721319396 + 1) / 2., (0.9295691721319396 + 1) / 2.,
      (-0.9464113748584028 + 1) / 2., (0.9464113748584028 + 1) / 2.,
      (-0.9610087996520538 + 1) / 2., (0.9610087996520538 + 1) / 2.,
      (-0.9733268277899110 + 1) / 2., (0.9733268277899110 + 1) / 2.,
      (-0.9833362538846260 + 1) / 2., (0.9833362538846260 + 1) / 2.,
      (-0.9910133714767443 + 1) / 2., (0.9910133714767443 + 1) / 2.,
      (-0.9963401167719553 + 1) / 2., (0.9963401167719553 + 1) / 2.,
      (-0.9993050417357722 + 1) / 2., (0.9993050417357722 + 1) / 2.};
}

// -----------
// quadrature weights

// 1 Gauss point
template <> const std::array<double, 1> Gauss<1>::quadratureWeights() {
  return std::array<double, 1>{1.0};
}

// 2 Gauss points
template <> const std::array<double, 2> Gauss<2>::quadratureWeights() {
  return std::array<double, 2>{
      1 / 2.,
      1 / 2.,
  };
}

// 3 Gauss points
template <> const std::array<double, 3> Gauss<3>::quadratureWeights() {
  return std::array<double, 3>{
      5. / 18,
      4. / 9.,
      5. / 18,
  };
}

// 4 Gauss points
template <> const std::array<double, 4> Gauss<4>::quadratureWeights() {
  return std::array<double, 4>{
      (18. - sqrt(30.)) / 36. / 2., (18. + sqrt(30.)) / 36. / 2.,
      (18. + sqrt(30.)) / 36. / 2., (18. - sqrt(30.)) / 36. / 2.};
}

// 5 Gauss points
template <> const std::array<double, 5> Gauss<5>::quadratureWeights() {
  return std::array<double, 5>{(322. - 13. * sqrt(70.)) / 900. / 2.,
                               (322. + 13. * sqrt(70.)) / 900. / 2.,
                               128. / 225. / 2.,
                               (322. + 13. * sqrt(70.)) / 900. / 2.,
                               (322. - 13. * sqrt(70.)) / 900. / 2.};
}

// 6 Gauss points
template <> const std::array<double, 6> Gauss<6>::quadratureWeights() {
  return std::array<double, 6>{
      0.3607615730481386 / 2., 0.3607615730481386 / 2., 0.4679139345726910 / 2.,
      0.4679139345726910 / 2., 0.1713244923791704 / 2., 0.1713244923791704 / 2.,
  };
}

// 7 Gauss points
template <> const std::array<double, 7> Gauss<7>::quadratureWeights() {
  return std::array<double, 7>{
      0.4179591836734694 / 2., 0.3818300505051189 / 2., 0.3818300505051189 / 2.,
      0.2797053914892766 / 2., 0.2797053914892766 / 2., 0.1294849661688697 / 2.,
      0.1294849661688697 / 2.,
  };
}

// 8 Gauss points
template <> const std::array<double, 8> Gauss<8>::quadratureWeights() {
  return std::array<double, 8>{
      0.3626837833783620 / 2., 0.3626837833783620 / 2., 0.3137066458778873 / 2.,
      0.3137066458778873 / 2., 0.2223810344533745 / 2., 0.2223810344533745 / 2.,
      0.1012285362903763 / 2., 0.1012285362903763 / 2.};
}

// 10 Gauss points
template <> const std::array<double, 10> Gauss<10>::quadratureWeights() {
  return std::array<double, 10>{
      0.2955242247147529 / 2., 0.2955242247147529 / 2., 0.2692667193099963 / 2.,
      0.2692667193099963 / 2., 0.2190863625159820 / 2., 0.2190863625159820 / 2.,
      0.1494513491505806 / 2., 0.1494513491505806 / 2., 0.0666713443086881 / 2.,
      0.0666713443086881 / 2.};
}

// 12 Gauss points
template <> const std::array<double, 12> Gauss<12>::quadratureWeights() {
  return std::array<double, 12>{
      0.2491470458134028 / 2., 0.2491470458134028 / 2.,
      0.2334925365383548 / 2., 0.2334925365383548 / 2.,
      0.2031674267230659 / 2., 0.2031674267230659 / 2.,
      0.1600783285433462 / 2., 0.1600783285433462 / 2.,
      0.1069393259953184 / 2., 0.1069393259953184 / 2.,
      0.0471753363865118 / 2., 0.0471753363865118 / 2.};
}

// 16 Gauss points
template <> const std::array<double, 16> Gauss<16>::quadratureWeights() {
  return std::array<double, 16>{
      0.1894506104550685 / 2., 0.1894506104550685 / 2., 0.1826034150449236 / 2.,
      0.1826034150449236 / 2., 0.1691565193950025 / 2., 0.1691565193950025 / 2.,
      0.1495959888165767 / 2., 0.1495959888165767 / 2., 0.1246289712555339 / 2.,
      0.1246289712555339 / 2., 0.0951585116824928 / 2., 0.0951585116824928 / 2.,
      0.0622535239386479 / 2., 0.0622535239386479 / 2., 0.0271524594117541 / 2.,
      0.0271524594117541 / 2.};
}

// 20 Gauss points
template <> const std::array<double, 20> Gauss<20>::quadratureWeights() {
  return std::array<double, 20>{
      0.1527533871307258 / 2., 0.1527533871307258 / 2., 0.1491729864726037 / 2.,
      0.1491729864726037 / 2., 0.1420961093183820 / 2., 0.1420961093183820 / 2.,
      0.1316886384491766 / 2., 0.1316886384491766 / 2., 0.1181945319615184 / 2.,
      0.1181945319615184 / 2., 0.1019301198172404 / 2., 0.1019301198172404 / 2.,
      0.0832767415767048 / 2., 0.0832767415767048 / 2., 0.0626720483341091 / 2.,
      0.0626720483341091 / 2., 0.0406014298003869 / 2., 0.0406014298003869 / 2.,
      0.0176140071391521 / 2., 0.0176140071391521 / 2.};
}

// 24 Gauss points
template <> const std::array<double, 24> Gauss<24>::quadratureWeights() {
  return std::array<double, 24>{
      0.1279381953467522 / 2., 0.1279381953467522 / 2.,
      0.1258374563468283 / 2., 0.1258374563468283 / 2.,
      0.1216704729278034 / 2., 0.1216704729278034 / 2.,
      0.1155056680537256 / 2., 0.1155056680537256 / 2.,
      0.1074442701159656 / 2., 0.1074442701159656 / 2.,
      0.0976186521041139 / 2., 0.0976186521041139 / 2.,
      0.0861901615319533 / 2., 0.0861901615319533 / 2.,
      0.0733464814110803 / 2., 0.0733464814110803 / 2.,
      0.0592985849154368 / 2., 0.0592985849154368 / 2.,
      0.0442774388174198 / 2., 0.0442774388174198 / 2.,
      0.0285313886289337 / 2., 0.0285313886289337 / 2.,
      0.0123412297999872 / 2., 0.0123412297999872 / 2.};
}

// 64 Gauss points
template <> const std::array<double, 64> Gauss<64>::quadratureWeights() {
  // source: https://pomax.github.io/bezierinfo/legendre-gauss.html
  return std::array<double, 64>{
      0.0486909570091397 / 2., 0.0486909570091397 / 2., 0.0485754674415034 / 2.,
      0.0485754674415034 / 2., 0.0483447622348030 / 2., 0.0483447622348030 / 2.,
      0.0479993885964583 / 2., 0.0479993885964583 / 2., 0.0475401657148303 / 2.,
      0.0475401657148303 / 2., 0.0469681828162100 / 2., 0.0469681828162100 / 2.,
      0.0462847965813144 / 2., 0.0462847965813144 / 2., 0.0454916279274181 / 2.,
      0.0454916279274181 / 2., 0.0445905581637566 / 2., 0.0445905581637566 / 2.,
      0.0435837245293235 / 2., 0.0435837245293235 / 2., 0.0424735151236536 / 2.,
      0.0424735151236536 / 2., 0.0412625632426235 / 2., 0.0412625632426235 / 2.,
      0.0399537411327203 / 2., 0.0399537411327203 / 2., 0.0385501531786156 / 2.,
      0.0385501531786156 / 2., 0.0370551285402400 / 2., 0.0370551285402400 / 2.,
      0.0354722132568824 / 2., 0.0354722132568824 / 2., 0.0338051618371416 / 2.,
      0.0338051618371416 / 2., 0.0320579283548516 / 2., 0.0320579283548516 / 2.,
      0.0302346570724025 / 2., 0.0302346570724025 / 2., 0.0283396726142595 / 2.,
      0.0283396726142595 / 2., 0.0263774697150547 / 2., 0.0263774697150547 / 2.,
      0.0243527025687109 / 2., 0.0243527025687109 / 2., 0.0222701738083833 / 2.,
      0.0222701738083833 / 2., 0.0201348231535302 / 2., 0.0201348231535302 / 2.,
      0.0179517157756973 / 2., 0.0179517157756973 / 2., 0.0157260304760247 / 2.,
      0.0157260304760247 / 2., 0.0134630478967186 / 2., 0.0134630478967186 / 2.,
      0.0111681394601311 / 2., 0.0111681394601311 / 2., 0.0088467598263639 / 2.,
      0.0088467598263639 / 2., 0.0065044579689784 / 2., 0.0065044579689784 / 2.,
      0.0041470332605625 / 2., 0.0041470332605625 / 2., 0.0017832807216964 / 2.,
      0.0017832807216964 / 2.};
}

} // namespace Quadrature
