# This script declares to SCons how to compile opendihu core.
# It has to be called from a SConstruct file.
# The 'env' object is passed from there and contains further specification like directory and debug/release flags.

Import('env')     # import Environment object from calling SConstruct

# define the source files
src_files = Glob('src/*/*.cpp') + Glob('src/*.cpp') + Glob('src/*/*/*.cpp') + Glob('src/*/*/*/*.cpp') + Glob('src/*/*/*/*/*.cpp')

# define include directory for header files
env.Append(CPPPATH = 'src')

# depending on the variable BUILD_TYPE either build with debug, releasewithdebuginfo or release settings
if env["BUILD_TYPE"] == "debug":    # will build debug version
  target = 'opendihud'
elif env["BUILD_TYPE"] == "releasewithdebuginfo":    # will build releasewithdebuginfo version
  target = 'opendihurd'
else:
  target = 'opendihu'       # will build release version

# precompiled headers
if env["ph"]:
  import gch

  gch.generate(env)
  env['precompiled_header'] = File('src/opendihu.h')
  env['Gch'] = env.Gch(target='src/opendihu.h.gch', source=env['precompiled_header'])

# build the library
env.Tool('compilation_db')
env.CompilationDatabase()
env.Library(target = target, source = src_files)

# simple test program
#env.Program(target = "python-test", source = "src/main.cpp")
