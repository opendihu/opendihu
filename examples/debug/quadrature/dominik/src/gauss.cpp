#include "gauss.h"

#include <array>
#include <cmath>

namespace Quadrature {

// 1 Gauss point
template <> std::array<double, 1> Gauss<1>::samplingPoints() {
  return std::array<double, 1>{0.5};
}

// 2 Gauss points
template <> std::array<double, 2> Gauss<2>::samplingPoints() {
  return std::array<double, 2>{
      (-1. / sqrt(3.) + 1) / 2.,
      (+1. / sqrt(3.) + 1) / 2.,
  };
}

// 3 Gauss points
template <> std::array<double, 3> Gauss<3>::samplingPoints() {
  return std::array<double, 3>{
      (-sqrt(3. / 5) + 1) / 2.,
      1. / 2,
      (+sqrt(3. / 5) + 1) / 2.,
  };
}

// 4 Gauss points
template <> std::array<double, 4> Gauss<4>::samplingPoints() {
  return std::array<double, 4>{(-sqrt(3. / 7 + 2. / 7 * sqrt(6. / 5)) + 1) / 2.,
                               (-sqrt(3. / 7 - 2. / 7 * sqrt(6. / 5)) + 1) / 2.,
                               (+sqrt(3. / 7 - 2. / 7 * sqrt(6. / 5)) + 1) / 2.,
                               (+sqrt(3. / 7 + 2. / 7 * sqrt(6. / 5)) + 1) /
                                   2.};
}

// 5 Gauss points
template <> std::array<double, 5> Gauss<5>::samplingPoints() {
  return std::array<double, 5>{
      (-1. / 3 * sqrt(5 + 2. * sqrt(10. / 7)) + 1) / 2.,
      (-1. / 3 * sqrt(5 - 2. * sqrt(10. / 7)) + 1) / 2., 1. / 2.,
      (+1. / 3 * sqrt(5 - 2. * sqrt(10. / 7)) + 1) / 2.,
      (+1. / 3 * sqrt(5 + 2. * sqrt(10. / 7)) + 1) / 2.};
}

// 7 Gauss points
template <> std::array<double, 6> Gauss<6>::samplingPoints() {
  return std::array<double, 6>{
      (0.6612093864662645 + 1) / 2.,  (-0.6612093864662645 + 1) / 2.,
      (-0.2386191860831969 + 1) / 2., (0.2386191860831969 + 1) / 2.,
      (-0.9324695142031521 + 1) / 2., (0.9324695142031521 + 1) / 2.,
  };
}

// 7 Gauss points
template <> std::array<double, 7> Gauss<7>::samplingPoints() {
  return std::array<double, 7>{
      (0.0000000000000000 + 1) / 2.,  (0.4058451513773972 + 1) / 2.,
      (-0.4058451513773972 + 1) / 2., (-0.7415311855993945 + 1) / 2.,
      (0.7415311855993945 + 1) / 2.,  (-0.9491079123427585 + 1) / 2.,
      (0.9491079123427585 + 1) / 2.};
}

// 64 Gauss points
template <> std::array<double, 64> Gauss<64>::samplingPoints() {
  // source: https://pomax.github.io/bezierinfo/legendre-gauss.html
  return std::array<double, 64>{
      (-0.0243502926634244 + 1) / 2., (0.0243502926634244 + 1) / 2.,
      (-0.0729931217877990 + 1) / 2., (0.0729931217877990 + 1) / 2.,
      (-0.1214628192961206 + 1) / 2., (0.1214628192961206 + 1) / 2.,
      (-0.1696444204239928 + 1) / 2., (0.1696444204239928 + 1) / 2.,
      (-0.2174236437400071 + 1) / 2., (0.2174236437400071 + 1) / 2.,
      (-0.2646871622087674 + 1) / 2., (0.2646871622087674 + 1) / 2.,
      (-0.3113228719902110 + 1) / 2., (0.3113228719902110 + 1) / 2.,
      (-0.3572201583376681 + 1) / 2., (0.3572201583376681 + 1) / 2.,
      (-0.4022701579639916 + 1) / 2., (0.4022701579639916 + 1) / 2.,
      (-0.4463660172534641 + 1) / 2., (0.4463660172534641 + 1) / 2.,
      (-0.4894031457070530 + 1) / 2., (0.4894031457070530 + 1) / 2.,
      (-0.5312794640198946 + 1) / 2., (0.5312794640198946 + 1) / 2.,
      (-0.5718956462026340 + 1) / 2., (0.5718956462026340 + 1) / 2.,
      (-0.6111553551723933 + 1) / 2., (0.6111553551723933 + 1) / 2.,
      (-0.6489654712546573 + 1) / 2., (0.6489654712546573 + 1) / 2.,
      (-0.6852363130542333 + 1) / 2., (0.6852363130542333 + 1) / 2.,
      (-0.7198818501716109 + 1) / 2., (0.7198818501716109 + 1) / 2.,
      (-0.7528199072605319 + 1) / 2., (0.7528199072605319 + 1) / 2.,
      (-0.7839723589433414 + 1) / 2., (0.7839723589433414 + 1) / 2.,
      (-0.8132653151227975 + 1) / 2., (0.8132653151227975 + 1) / 2.,
      (-0.8406292962525803 + 1) / 2., (0.8406292962525803 + 1) / 2.,
      (-0.8659993981540928 + 1) / 2., (0.8659993981540928 + 1) / 2.,
      (-0.8893154459951141 + 1) / 2., (0.8893154459951141 + 1) / 2.,
      (-0.9105221370785028 + 1) / 2., (0.9105221370785028 + 1) / 2.,
      (-0.9295691721319396 + 1) / 2., (0.9295691721319396 + 1) / 2.,
      (-0.9464113748584028 + 1) / 2., (0.9464113748584028 + 1) / 2.,
      (-0.9610087996520538 + 1) / 2., (0.9610087996520538 + 1) / 2.,
      (-0.9733268277899110 + 1) / 2., (0.9733268277899110 + 1) / 2.,
      (-0.9833362538846260 + 1) / 2., (0.9833362538846260 + 1) / 2.,
      (-0.9910133714767443 + 1) / 2., (0.9910133714767443 + 1) / 2.,
      (-0.9963401167719553 + 1) / 2., (0.9963401167719553 + 1) / 2.,
      (-0.9993050417357722 + 1) / 2., (0.9993050417357722 + 1) / 2.};
}

}; // namespace Quadrature