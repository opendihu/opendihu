<?xml version="1.0"?>

<precice-configuration>
  <log>
    <!--<sink type="stream" output="stdout"  filter='(%Severity% >= debug) and (not (%Function% = "advance"))' format="\033[0;33m%Rank% [precice]\033[0m %ColorizedSeverity%\033[0;33m%Message%\033[0m" enabled="true" />-->
    <sink type="stream" output="stdout"  filter='(%Severity% >= debug) and (not (%Function% = "advance")) and (%Rank% = 0)' format="\033[0;33m%Rank% [precice]\033[0m %ColorizedSeverity%\033[0;33m%Message%\033[0m" enabled="true" />
    <!--<sink type="stream" output="stdout"  filter='%Severity% >= debug' format="\033[0;33m%Rank% [precice]\033[0m %ColorizedSeverity%\033[0;33m%Message%\033[0m" enabled="true" />-->
    <!--<sink type="file" output="debug.log" filter= "(%Severity% >= debug)" format="%Message%" enabled="true" />	-->
  </log>
    
  <!-- Data fields that are exchanged between the solvers -->
  <data:vector name="Geometry"/>
  <data:scalar name="Gamma"/>
  <!--<data:scalar name="Lambda"/>
  <data:scalar name="LambdaDot"/>-->

  <!-- A common mesh that uses these data fields -->
  <mesh name="PartitionedFibersMesh" dimensions="3">
    <use-data name="Geometry"/>
    <use-data name="Gamma"/>
  </mesh>

  <mesh name="MuscleContractionMesh" dimensions="3">
    <use-data name="Geometry"/>
    <use-data name="Gamma"/>
  </mesh>

  <!-- Represents each solver using preCICE. In a coupled simulation, two participants have to be
        defined. The name of the participant has to match the name given on construction of the
        precice::Participant object used by the participant. -->
  
  <participant name="PartitionedFibers">
    
    <!-- Makes the named mesh available to the participant. Mesh is provided by the solver directly. -->
    <provide-mesh name="PartitionedFibersMesh"/>
    <receive-mesh name="MuscleContractionMesh" from="MuscleContraction"/>
    <export:vtu directory="precice-output" every-n-time-windows="10"  />
    
    <!-- Define input/output of the solver.  -->
    <write-data name="Gamma" mesh="PartitionedFibersMesh"/>
    <read-data  name="Geometry" mesh="PartitionedFibersMesh"/>

    <!-- rbf to map from MuscleContractionMesh to PartitionedFibersMesh -->
    <!--
$./rbfShape.py 0.01 5
Using values:
h     = 0.01
m     = 5
decay = 1e-09
Result:
s = 91.0456277631
-->
    <!--<mapping:rbf-gaussian 
      direction="read" 
      from="MuscleContractionMesh" 
      to="PartitionedFibersMesh" 
      constraint="consistent" 
      timing="initial" 
      shape-parameter="91.05"
    />-->
    
    <mapping:rbf direction="read" from="MuscleContractionMesh" to="PartitionedFibersMesh" constraint="consistent">
      <basis-function:compact-polynomial-c6 support-radius="0.5" />
    </mapping:rbf>

    <!--<mapping:nearest-neighbor direction="read" from="MuscleContractionMesh" to="PartitionedFibersMesh" constraint="consistent" />-->
    <!-- rbf-compact-tps-c2 abgeschnittene splines, 3-5 Nachbarn im support radius--> 
    <!-- <mapping:rbf-thin-plate-splines
      direction="read" 
      from="MuscleContractionMesh" 
      to="PartitionedFibersMesh" 
      constraint="consistent" 
      />-->
  
  </participant>
  
  <participant name="MuscleContraction">
    <provide-mesh name="MuscleContractionMesh"/>
    <receive-mesh name="PartitionedFibersMesh" from="PartitionedFibers"/>
    <write-data name="Geometry" mesh="MuscleContractionMesh"/>
    <read-data  name="Gamma"    mesh="MuscleContractionMesh"/>
    <export:vtu directory="precice-output" every-n-time-windows="10"  />
    
    <!-- map from PartitionedFibersMesh to  MuscleContractionMesh -->
    <!-- shape-parameter: 
    ./rbfShape.py 0.01 3
    Using values:
      h     = 0.01
      m     = 3
      decay = 1e-09
    Result:
      s = 151.74271293851464
    -->
    <!-- <mapping:rbf-gaussian 
      direction="read" 
      from="PartitionedFibersMesh" 
      to="MuscleContractionMesh" 
      constraint="consistent" 
      timing="initial" 
      shape-parameter="151.74"
    />-->
    
    <mapping:rbf direction="read" from="PartitionedFibersMesh" to="MuscleContractionMesh" constraint="consistent">
      <basis-function:compact-polynomial-c6 support-radius="0.1" />
    </mapping:rbf> <!-- spacing between nodes is 0.01 -->
    
    <!-- available mappings:
      rbf-thin-plate-splines
      rbf-multiquadrics
      rbf-inverse-multiquadrics
      rbf-volume-splines
      rbf-gaussian
      rbf-compact-tps-c2
      rbf-compact-polynomial-c0
      rbf-compact-polynomial-c6
      nearest-neighbor
      nearest-projection
    -->

    <!--<mapping:nearest-neighbor 
      direction="read" from="PartitionedFibersMesh" to="MuscleContractionMesh" constraint="consistent" timing="initial"/>-->
    <!--
    rbf is very slow!
    <mapping:rbf-thin-plate-splines
      direction="read" 
      from="PartitionedFibersMesh" 
      to="MuscleContractionMesh" 
      constraint="consistent" 
      />-->
    
    <!-- rbf-compact-tps-c2 abgeschnittene splines, 3-5 Nachbarn im support radius--> 
    <!--<mapping:rbf-compact-polynomial-c6
      direction="read" 
      from="PartitionedFibersMesh" 
      to="MuscleContractionMesh" 
      constraint="consistent" 
      support-radius="0.1"
    />-->
    
  </participant>

  <!-- Communication method, use TCP sockets, Change network to "ib0" on SuperMUC -->
  <m2n:sockets acceptor="PartitionedFibers" connector="MuscleContraction" network="lo" />

  <coupling-scheme:serial-explicit>
    <participants first="PartitionedFibers" second="MuscleContraction"/>
    <max-time value="1000.0"/>           <!-- end time of the whole simulation -->
    <time-window-size value="1e-1"/>   <!-- timestep width dt_3D -->
    
    <exchange data="Gamma"    mesh="PartitionedFibersMesh" from="PartitionedFibers" to="MuscleContraction"/>
    <exchange data="Geometry" mesh="MuscleContractionMesh" from="MuscleContraction" to="PartitionedFibers" initialize="yes"/> 
  </coupling-scheme:serial-explicit>
  
</precice-configuration>
